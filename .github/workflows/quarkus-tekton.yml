name: quarkus-tekton

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
  # TODO: To be reviewed to figure out if we need it or not
  #pull_request_target:
  #  branches: [ 'main' ]
  #  # types: [opened, edited]

permissions:
  contents: write
  pull-requests: write

env:
  IDPBUILDER_VERSION: v0.9.0

  TEKTON_VERSION: v0.60.1
  TEKTON_CLIENT_VERSION: 0.37.0

  # From idpbuilder project
  ARGOCD_VERSION: 2.10.7
  GITEA_VERSION: 1.22

  # The git repo name is also the name of the project's parameter of the template
  REPO_NAME: my-quarkus-app-job
  REPO_ORG: q-shift

  # This namespace will be used to build/deploy the generated quarkus app and
  # should be the same as the one defined within the ConfigMap of ArgocCD using: application.namespaces: "demo"
  KUBE_NAMESPACE: demo

jobs:
  setup-idp:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install idpbuilder
        run: |
          version=${IDPBUILDER_VERSION}
          curl -L -o ./idpbuilder.tar.gz "https://github.com/cnoe-io/idpbuilder/releases/download/${version}/idpbuilder-$(uname | awk '{print tolower($0)}')-$(uname -m | sed 's/x86_64/amd64/').tar.gz"
          tar xzf idpbuilder.tar.gz
          sudo mv ./idpbuilder /usr/local/bin/          

          idpbuilder version

      - name: Install tekton client
        run: |
          curl -sSL "https://github.com/tektoncd/cli/releases/download/v{$TEKTON_CLIENT_VERSION}/tkn_${TEKTON_CLIENT_VERSION}_Linux_x86_64.tar.gz" -o tkn.tar.gz
          sudo tar xvzf tkn.tar.gz -C /usr/local/bin/ tkn
          tkn version

      - name: Create an IDP cluster and install the packages
        run: |
          PACKAGES_DIR=$(pwd)/.github/idp
          idpbuilder create \
            -p $PACKAGES_DIR/tekton

      - name: Create the namespace where applications, resources should be deployed
        run: |
          kubectl create ns ${KUBE_NAMESPACE}

      - name: Set idp env variables
        run: |
          GITEA_HOST=$(kubectl get ingress/my-gitea -n gitea -ojson | jq -r '.spec.rules[0].host')
          GITEA_USERNAME=$(idpbuilder get secrets -p gitea -ojson | jq -r '.[].data.username')
          GITEA_PASSWORD=$(idpbuilder get secrets -p gitea -ojson | jq -r '.[].data.password')
          
          echo "GITEA_HOST=$GITEA_HOST:8443" >> "$GITHUB_ENV"
          echo "GITEA_USERNAME=$GITEA_USERNAME" >> "$GITHUB_ENV"
          echo "GITEA_PASSWORD=$GITEA_PASSWORD" >> "$GITHUB_ENV"
          
          ARGOCD_USERNAME=$(idpbuilder get secrets -p argocd -ojson | jq -r '.[].data.username')
          ARGOCD_PASSWORD=$(idpbuilder get secrets -p argocd -ojson | jq -r '.[].data.password')
          ARGOCD_SERVER_HOST=$(kubectl get ingress/argocd-server-ingress -n argocd -ojson | jq -r '.spec.rules[0].host')
          ARGOCD_SERVER_PORT=8443
          ARGOCD_SERVER_URL="https://$ARGOCD_SERVER_HOST:$ARGOCD_SERVER_PORT"
          
          echo "ARGOCD_SERVER_HOST=$ARGOCD_SERVER_HOST" >> "$GITHUB_ENV"
          echo "ARGOCD_SERVER_PORT=$ARGOCD_SERVER_PORT" >> "$GITHUB_ENV"
          echo "ARGOCD_SERVER_URL=$ARGOCD_SERVER_URL" >> "$GITHUB_ENV"
          echo "ARGOCD_USERNAME=$ARGOCD_USERNAME" >> "$GITHUB_ENV"
          echo "ARGOCD_PASSWORD=$ARGOCD_PASSWORD" >> "$GITHUB_ENV"
          
          KUBERNETES_TOKEN=$(kubectl get secret backstage-secret -n backstage -o json | jq -r '.data.token' | base64 -d)
          echo "KUBERNETES_TOKEN=$KUBERNETES_TOKEN" >> "$GITHUB_ENV"
          
          BACKSTAGE_AUTH_SECRET=$(node -p 'require("crypto").randomBytes(24).toString("base64")')
          echo "BACKSTAGE_AUTH_SECRET=$BACKSTAGE_AUTH_SECRET" >> "$GITHUB_ENV"
          
          echo "Get node IP and port to access it"
          CLUSTER_IP=$(docker inspect localdev-control-plane | jq -r '.[].NetworkSettings.Ports."6443/tcp"[0].HostIp')
          CLUSTER_PORT=$(docker inspect localdev-control-plane | jq -r '.[].NetworkSettings.Ports."6443/tcp"[0].HostPort')
          API_URL="https://$CLUSTER_IP:$CLUSTER_PORT"
          echo "API_URL=$API_URL" >> "$GITHUB_ENV"

      #- name: Create the secret containing the creds to write an image on Gitea
      #  run: |
      #    GITEA_CREDS=$(echo -n "$GITEA_USERNAME:$GITEA_PASSWORD" | base64 -w 0)
      #
      #    cat <<EOF > config.json
      #    {
      #      "auths": {
      #        "$GITEA_HOST": {
      #          "auth": "$GITEA_CREDS"
      #        }
      #      }
      #    }
      #    EOF
      #    kubectl create secret generic dockerconfig-secret -n demo --from-file=config.json

      #- name: Create the gitea organization
      #  run: |
      #    echo "Creating the organization: $REPO_ORG on $GITEA_HOST"
      #    curl -k -X POST \
      #      "https://$GITEA_HOST/api/v1/orgs" \
      #      -H 'accept: application/json' \
      #      -H 'Content-Type: application/json' \
      #      -u "$GITEA_USERNAME:$GITEA_PASSWORD" \
      #      -d '{"username": "'"$REPO_ORG"'"}'

      - name: Create the secret containing the creds to write an image on Quay.io and org qshift
        env:
          QUAY_USERNAME: ${{ secrets.QUAY_USERNAME }}
          QUAY_ROBOT_TOKEN: ${{ secrets.QUAY_ROBOT_TOKEN }}
        run: |
          QUAY_CREDS=$(echo -n "$QUAY_USERNAME:$QUAY_ROBOT_TOKEN" | base64 -w 0)
          
          cat <<EOF > config.json
          {
            "auths": {
                "quay.io/$QUAY_ORG": {
                  "auth": "$QUAY_CREDS"
                }
            }
          }
          EOF
          kubectl create secret generic dockerconfig-secret -n demo --from-file=config.json

      - name: Configure app-config.local.yaml file
        env:
          GITHUB_PERSONAL_ACCESS_TOKEN: ${{ secrets.BACKSTAGE_GITHUB_TOKEN }}
        run: |
          cat <<EOF > backstage_env_secret.env
          BACKSTAGE_APP_BASE_URL=http://localhost:3000
          BACKSTAGE_BACKEND_BASE_URL=http://localhost:7007
          BACKSTAGE_AUTH_SECRET=$BACKSTAGE_AUTH_SECRET
          #TEMPLATE_URL=https://github.com/q-shift/backstage-playground/blob/main/locations/root.yaml
          ARGOCD_SERVER=$ARGOCD_SERVER_URL
          ARGOCD_ADMIN_USER=$ARGOCD_USERNAME
          ARGOCD_ADMIN_PASSWORD=$ARGOCD_PASSWORD
          GITHUB_PERSONAL_ACCESS_TOKEN=$GITHUB_PERSONAL_ACCESS_TOKEN
          GITEA_HOST=$GITEA_HOST
          GITEA_USERNAME=$GITEA_USERNAME
          GITEA_PASSWORD="$GITEA_PASSWORD"
          KUBERNETES_API_URL=$API_URL
          KUBERNETES_TOKEN=$KUBERNETES_TOKEN
          EOF
          
          export $(grep -v '^#' backstage_env_secret.env | xargs)
          envsubst < manifest/templates/app-config.qshift.tmpl > app-config.local.yaml
          
          cat app-config.local.yaml

      - name: Delete application repository
        # WARNING: Don't run jobs in // as both will create/push or delete content from same github repository
        run: |
          if gh repo view $REPO_ORG/$REPO_NAME > /dev/null 2>&1; then
            echo "Repository '$REPO_ORG/$REPO_NAME' exists."
            gh repo delete $REPO_ORG/$REPO_NAME --yes
          fi
        env:
          GH_TOKEN: ${{ secrets.WORKFLOW_GITHUB_TOKEN }}

      - name: Wait till the status of the Application parent is healthy
        run: |
          SCRIPTS=$(pwd)/.github/scripts
          
          # echo "#########################################"          
          # echo "Create manually the ArgoCD resources: project and application bootstrap ..."
          # echo "#########################################"          
          # kubectl apply -f $(pwd)/.github/resources/argocd.yaml

          if ! $SCRIPTS/waitFor.sh application $REPO_NAME-bootstrap argocd Healthy; then
            echo "Failed to watch: application $REPO_NAME-bootstrap"
            exit 1;
          fi

          echo "#########################################"          
          echo "Detail Application(s) information"
          echo "#########################################"
          kubectl get application -A

      - name: Wait till the children applications are synced too
        run: |
          SCRIPTS=$(pwd)/.github/scripts
          
          echo "#########################################"
          echo "List the AppProject ..."
          echo "#########################################"
          kubectl get appproject -A
          
          echo "#########################################"
          echo "Show the AppProject ..."
          echo "#########################################"
          kubectl get appproject -A -oyaml
          
          echo "#########################################"
          echo "Log the Application YAML for $REPO_NAME-build-test-push ..."
          echo "#########################################"
          kubectl -n ${KUBE_NAMESPACE} get application $REPO_NAME-build-test-push -oyaml          
          
          if ! $SCRIPTS/waitFor.sh application $REPO_NAME-build-test-push ${KUBE_NAMESPACE} Synced ; then
            $SCRIPTS/logApplication.sh $REPO_NAME build-test-push $KUBE_NAMESPACE
            exit 1;
          else
            echo "#########################################"
            echo "Show Application ${REPO_NAME}-build-test-push in namespace ${KUBE_NAMESPACE}"
            echo "#########################################"
            argocd app get ${KUBE_NAMESPACE}/${REPO_NAME}-build-test-push
          fi
          
          if ! $SCRIPTS/waitFor.sh application $REPO_NAME-db ${KUBE_NAMESPACE} Synced ; then
            $SCRIPTS/logApplication.sh $REPO_NAME db $KUBE_NAMESPACE
            exit 1;
          else
            echo "#########################################"
            echo "Show Application ${REPO_NAME}-db in namespace ${KUBE_NAMESPACE}"
            echo "#########################################"
          fi
          
          if ! $SCRIPTS/waitFor.sh application $REPO_NAME-deploy $KUBE_NAMESPACE Synced ; then
            $SCRIPTS/logApplication.sh $REPO_NAME deploy $KUBE_NAMESPACE
            exit 1;
          else
            echo "#########################################"
            echo "Show Application ${REPO_NAME}-deploy in namespace ${KUBE_NAMESPACE}"
            echo "#########################################"
          fi

      - name: Watch tekton resources ...
        run: |
          get_pipelineruns_length() {
            tkn pipelinerun list -n ${KUBE_NAMESPACE} -o json | jq -r '.items | length'
          }
          
          echo "#########################################"
          echo "Pipelineruns starting ..."
          echo "#########################################"
          for i in `seq 30`; do
            if [[ $(get_pipelineruns_length) -gt 0 ]]; then
              tkn pipelinerun logs -n ${KUBE_NAMESPACE} $REPO_NAME-build-test-push -f
            else
              echo "#########################################"
              echo "Wait till the pipelineruns is running ..."
              echo "#########################################"
              kubectl get pods -n ${KUBE_NAMESPACE}
          
              sleep 30
            fi
          done

      - name: Wait till the application is running and log it
        run: |
          SCRIPTS=$(pwd)/.github/scripts

          if ! $SCRIPTS/waitFor.sh deployment $REPO_NAME ${KUBE_NAMESPACE} READY; then
            echo "Failed to get deployment of $REPO_NAME in namespace ${KUBE_NAMESPACE}"
            exit 1;
          else
            echo "Show pods running within the namespace ${KUBE_NAMESPACE} ..."
            kubectl get pods -n ${KUBE_NAMESPACE}
            kubectl logs -n ${KUBE_NAMESPACE} -lapp.kubernetes.io/name=${REPO_NAME}
          fi

      - name: Execute if the job fails
        if: ${{ failure() }}
        run: |
          SCRIPTS=$(pwd)/.github/scripts
          
          echo "#########################################"
          echo "Get pods ...."
          echo "#########################################"
          kubectl get pods -A
          
          echo "#########################################"          
          echo "Show ArgoCD CM to verify if it includes parameters needed to work cross namespaces ..."
          echo "#########################################"
          kubectl get -n argocd cm/argocd-cmd-params-cm -oyaml
          
          $SCRIPTS/listShowDescribeResource.sh AppProject argocd
          
          $SCRIPTS/listShowDescribeResource.sh Applications ${KUBE_NAMESPACE}
          
          echo "#########################################"
          echo "Log ArgoCD application-controller ..."
          echo "#########################################"
          kubectl logs -n argocd -lapp.kubernetes.io/name=argocd-application-controller --tail=-1
          
          # $SCRIPTS/logTektonResources.sh
          

          
          
