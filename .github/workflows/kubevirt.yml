name: Run kubevirt on kind

on:
  workflow_dispatch:

jobs:
  kubevirt:
    runs-on: ubuntu-latest
    steps:
       - name: Checkout
         uses: actions/checkout@v3

       - name: Setup kind cluster
         env:
           REGISTRY_NAME: kind-registry
           REGISTRY_PORT: 5000
         run: |
           curl -s -L "https://raw.githubusercontent.com/snowdrop/k8s-infra/main/kind/registry.sh" | bash -s install
           curl -s -L "https://raw.githubusercontent.com/snowdrop/k8s-infra/main/kind/kind.sh" | bash -s install
           
           # Adding registry name to the /etc/hosts file
           echo "127.0.0.1 $REGISTRY_NAME" | sudo tee -a /etc/hosts

           # Exporting the registry location for subsequent jobs
           echo "KIND_REGISTRY=${REGISTRY_NAME}:${REGISTRY_PORT}" >> $GITHUB_ENV

       - name: Setup tools
         env:
           KUBECTL_VERSION: v1.28.1
         run: |
           echo "Installing kubectl"
           curl -LO "https://dl.k8s.io/release/$KUBECTL_VERSION/bin/linux/amd64/kubectl"

           echo "Successfully installed kubectl at kubectl:"
           kubectl version --client
       
       - name: Deploy kubevirt
         env:
           KUBEVIRT_VERSION: v1.0.0
           KUBEVIRT_CDI_VERSION: v1.57.0
           KUBEVIRT_COMMON_INSTANCETYPES_VERSION: v0.3.2
           KUBEVIRT_USE_EMULATION: "true"
         run: |
           function mount_disk() {
             node=$1
             idx=$2
             docker exec $node bash -c "mkdir -p /var/local/kubevirt-storage/local-volume/disk${idx}"
             docker exec $node bash -c "mkdir -p /mnt/local-storage/local/disk${idx}"
             docker exec $node bash -c "mount -o bind /var/local/kubevirt-storage/local-volume/disk${idx} /mnt/local-storage/local/disk${idx}"
           }

           echo "Deploying KubeVirt"
           kubectl apply -f "https://github.com/kubevirt/kubevirt/releases/download/${KUBEVIRT_VERSION}/kubevirt-operator.yaml"
           kubectl apply -f "https://github.com/kubevirt/kubevirt/releases/download/${KUBEVIRT_VERSION}/kubevirt-cr.yaml"
         
           echo "Configuring Kubevirt to use emulation"
           kubectl patch kubevirt kubevirt --namespace kubevirt --type=merge --patch '{"spec":{"configuration":{"developerConfiguration":{"useEmulation":true}}}}'
           
           echo "Deploying KubeVirt containerized-data-importer"
           kubectl apply -f "https://github.com/kubevirt/containerized-data-importer/releases/download/${KUBEVIRT_CDI_VERSION}/cdi-operator.yaml"
           kubectl apply -f "https://github.com/kubevirt/containerized-data-importer/releases/download/${KUBEVIRT_CDI_VERSION}/cdi-cr.yaml"
           
           echo "Waiting for KubeVirt to be ready"
           kubectl wait --for=condition=Available kubevirt kubevirt --namespace=kubevirt --timeout=5m
         
           echo "Successfully deployed KubeVirt, CDI:"
           kubectl get pods -n kubevirt
           kubectl get pods -n cdi
           
           NODE_NAME=$(kubectl get nodes -o=jsonpath='{.items[0].metadata.name}')
           echo "Node name is: $NODE_NAME"
                
           # Create local-volume directories, which, on other providers, are pre-provisioned.
           # For more info, check https://github.com/kubevirt/kubevirtci/blob/master/cluster-provision/STORAGE.md
           for i in {1..10}; do
             mount_disk $NODE_NAME $i
           done
           docker exec $NODE_NAME bash -c "chmod -R 777 /var/local/kubevirt-storage/local-volume"
           
           echo "# Create the local storage class"
           kubectl apply -f .github/resources/local-volume.yaml

       - name: Creating a VM
         run: |
           echo "## Creating the kubernetes secret storing the public key"
           ssh-keygen -N "" -f id_rsa
           kubectl create secret generic fedora-ssh-key -n default --from-file=key=id_rsa.pub
           
           echo "## Creating a VM"
           kubectl apply -f .github/resources/vm-fedora38.yml
           
           kubectl wait --for=condition=Ready vm/fedora38 --timeout=10m
           
           kubectl get vmi
           kubectl get vmi -o jsonpath='{.items[0].status.interfaces[0].ipAddress}'
           
       - name: (Only if it failed) Log messages
         if: failure()
         run: |
           echo "########### Virt Handler log ################"
           kubectl logs -lkubevirt.io=virt-handler
           
           echo "########### Describe VM ################"
           echo "Describe virtualmachine/fedora38"
           kubectl describe virtualmachine/fedora38
           
           echo "########### VM status ################"
           kubectl get virtualmachine/fedora38 -oyaml
           
           echo "########### VMI status ################"
           kubectl get vmi -A -oyaml
           
           echo "########### VM POD ################"
           kubectl get pod -lvm.kubevirt.io/name=fedora38 -oyaml
           
           echo "########### All PODs ################"
           kubectl get pod -A
           
           echo "######### PVC ################"
           kubectl get pvc -A
           
           echo "########### SC ####################"
           kubectl get sc -A -oyaml
