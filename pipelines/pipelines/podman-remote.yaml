---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: podman-remote
spec:
  tasks:
    #- name: modify-data-object
    #  params:
    #    - name: manifest
    #      value: |
    #        apiVersion: cdi.kubevirt.io/v1beta1
    #        kind: DataVolume
    #        metadata:
    #          generateName: flasker-server-
    #          annotations:
    #             cdi.kubevirt.io/storage.bind.immediate.requested: "true"
    #        spec:
    #          storage:
    #            resources:
    #              requests:
    #                storage: 30Gi
    #            volumeMode: Filesystem
    #          source:
    #            http:
    #              url: https://download.fedoraproject.org/pub/fedora/linux/releases/33/Cloud/x86_64/images/Fedora-Cloud-Base-33-1.2.x86_64.raw.xz
    #    - name: waitForSuccess
    #      value: 'true'
    #  taskRef:
    #    kind: Task
    #    name: modify-data-object

    - name: generate-ssh-keys
      taskRef:
        kind: Task
        name: generate-ssh-keys
      params:
        - name: privateKeyConnectionOptions
          value:
            - 'user:fedora'
            - 'disable-strict-host-key-checking:true'

    #- name: disk-virt-customize
    #  taskRef:
    #    kind: Task
    #    name: disk-virt-customize
    #  params:
    #    - name: pvc
    #      value: fedora # "$(tasks.modify-data-object.results.name)"
    #    - name: customizeCommands
    #      value: |
    #        install git,vim,pip
    #        run-command pip install flask
    #  runAfter:
    #    - generate-ssh-keys # modify-data-object

    - name: create-vm-from-manifest
      taskRef:
        kind: Task
        name: create-vm-from-manifest
      params:
        - name: manifest
          value: |
            apiVersion: kubevirt.io/v1
            kind: VirtualMachine
            metadata:
              name: podman-remote
              annotation:
                description: Podman remote
              labels:
                app: podman-remote
            spec:
              running: true
              template:
                metadata:
                  labels:
                    kubevirt.io/domain: podman-remote
                spec:
                  accessCredentials:
                    - sshPublicKey:
                        source:
                          secret:
                            secretName: $(tasks.generate-ssh-keys.results.publicKeySecretName)
                        propagationMethod:
                          configDrive: {}
                  domain:
                    cpu:
                      cores: 2
                      sockets: 1
                      threads: 1
                    devices:
                      disks:
                        - name: rootdisk
                          bootOrder: 1
                          disk:
                            bus: virtio
                        - name: cloudinitdrive
                          disk:
                            bus: virtio
                      interfaces:
                        - masquerade: {}
                          model: virtio
                          name: default
                      networkInterfaceMultiqueue: true
                      rng: {}
                    resources:
                      requests:
                        memory: 2Gi
                  hostname: podman-remote-vm
                  networks:
                    - name: default
                      pod: {}
                  volumes:
                  - name: rootdisk
                    dataVolume:
                      name: fedora
                  - name: cloudinitdrive
                    cloudInitConfigDrive:
                      userData: |
                        #cloud-config
                        hostname: podman-remote-vm
        - name: ownDataVolumes
          value:
            - "rootdisk:fedora" # "rootdisk:$(tasks.modify-data-object.results.name)"
      runAfter:
        - generate-ssh-keys

    - name: execute-in-vm
      taskRef:
        kind: Task
        name: execute-in-vm
      params:
        - name: vmName
          value: $(tasks.create-vm-from-manifest.results.name)
        - name: secretName
          value: $(tasks.generate-ssh-keys.results.privateKeySecretName)
        - name: script
          value: |
            echo "Check if socat process is running"
            ps -ef | grep socat
      runAfter:
        - create-vm-from-manifest